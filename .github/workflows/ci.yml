name: Continuous Integration

on:
  pull_request:
  push:

permissions:
  contents: read

jobs:
  test-typescript:
    name: TypeScript Tests
    runs-on: ubuntu-latest
    services:
      # Anything is fine as long as it accepts metrics and traces with OTLP because the tests does not check stored data.
      collector:
        image: otel/opentelemetry-collector-contrib:0.115.1
        ports:
          - 4318:4318

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          cache: npm

      - name: Install Dependencies
        id: npm-ci
        run: npm ci

      - name: Check Format
        id: npm-format-check
        run: npm run format:check

      - name: Lint
        id: npm-lint
        run: npm run lint

      - name: Test
        id: npm-test
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run test

  test-action:
    # This job should be last job in the workflow.
    needs: test-typescript
    name: GitHub Actions Test for push or pull_request event
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      # Create directory with proper permissions
      - name: Create log directory with proper permissions
        run: |
          mkdir -p collector-logs
          chmod 777 collector-logs

      # Start OpenTelemetry Collector manually after checkout
      - name: Start OpenTelemetry Collector
        # port 13133 is used for health checks, 4318 for OTLP HTTP endpoint
        run: |
          echo "Starting OpenTelemetry Collector with custom configuration..."
          docker run -d \
            --name otel-collector \
            -p 13133:13133 \
            -p 4318:4318 \
            -v ${{ github.workspace }}/.github/configs/otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml:ro \
            -v ${{ github.workspace }}/collector-logs:/collector-logs \
            --health-cmd "wget --no-verbose --tries=1 --spider http://localhost:13133/ || exit 1" \
            --health-interval 10s \
            --health-timeout 5s \
            --health-retries 3 \
            otel/opentelemetry-collector-contrib:0.115.1

      # Wait for collector to be healthy and ready
      - name: Wait for collector to be ready
        run: |
          echo "Waiting for OpenTelemetry Collector to be ready..."
          timeout 60s bash -c 'until docker ps | grep -q "healthy.*otel-collector"; do sleep 2; echo "-------- Collector Logs -----------"; docker logs otel-collector; echo "--------------------------------" ; echo "Waiting for collector health check..."; done'
          echo "Collector is ready"

      # Execute the GitHub Action which sends telemetry data to the collector
      - name: Test Local Action
        id: test-action
        uses: ./
        env:
          OTEL_SERVICE_NAME: github-actions-opentelemetry
          # Point to local collector service (not external endpoint)
          OTEL_EXPORTER_OTLP_ENDPOINT: http://localhost:4318
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Allow time for collector to flush logs to files
      - name: Wait for logs to be written
        run: |
          echo "Waiting for collector to flush logs to files..."
          sleep 5

          # Show current collector status
          echo "=== Collector container status ==="
          docker ps -a | grep otel-collector

          echo "=== Recent collector logs ==="
          docker logs --tail 20 otel-collector

      # Validate that collector generated the expected JSON log files with correct content
      - name: Validate collector logs
        run: |
          echo "=== Checking if log files exist ==="
          ls -la collector-logs/

          echo "=== Validating collector internal logs ==="
          # Check collector's own operational logs (internal telemetry)
          if [ -f "collector-logs/collector-logs.json" ]; then
            echo "Collector internal logs found"
            cat collector-logs/collector-logs.json | head -20
            
            # Verify that logs contain the expected service name from our action
            if grep -q "github-actions-opentelemetry" collector-logs/collector-logs.json; then
              echo "✓ Service name found in logs"
            else
              echo "✗ Service name not found in logs"
              exit 1
            fi
          else
            echo "✗ Collector internal logs not found"
            exit 1
          fi

          echo "=== Validating telemetry data logs ==="
          # Check logs containing the actual metrics and traces received by collector
          if [ -f "collector-logs/otel-logs.json" ]; then
            echo "Telemetry data logs found"
            cat collector-logs/otel-logs.json | head -20
            
            # Verify that telemetry data was actually received and logged
            if [ -s "collector-logs/otel-logs.json" ]; then
              echo "✓ Telemetry data received"
            else
              echo "✗ No telemetry data received"
              exit 1
            fi
          else
            echo "✗ Telemetry data logs not found"
            exit 1
          fi

      # Show final collector status and logs for debugging
      - name: Show collector debug info
        if: always()
        run: |
          echo "=== Final collector status ==="
          docker ps -a | grep otel-collector || echo "Collector container not found"

          echo "=== Complete collector logs ==="
          docker logs otel-collector || echo "Could not retrieve collector logs"

          echo "=== All generated files ==="
          find collector-logs -type f -exec echo "File: {}" \; -exec head -10 {} \; -exec echo "---" \; 2>/dev/null || echo "No files found"
