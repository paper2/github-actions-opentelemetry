name: Validate Action Output
# Reusable workflow for testing the GitHub Action with OpenTelemetry collector validation
# This workflow can be used to test different trigger events (push, workflow_run, etc.)
#
# To update test data for any workflow using this reusable workflow:
# 1. Run the calling workflow (by pushing changes, creating PR, or triggering workflow_run)
# 2. After workflow completion, download the artifact from the GitHub Actions run page
# 3. Extract the artifact and copy traces-actual.json and metrics-actual.json to the appropriate .github/test-data/ directory
# 4. Rename them to traces-expected.json and metrics-expected.json (removing the normalized values)
# 5. Check the differences old vs new expected files to ensure the changes are valid
# 6. Commit and push the updated test data files

on:
  workflow_call:
    inputs:
      test-data-directory:
        description:
          'Directory name under .github/test-data/ for expected test data'
        required: true
        type: string
      artifact-name:
        description: 'Name for the collector logs artifact'
        required: false
        type: string
        default: 'collector-logs'
      retention-days:
        description: 'Number of days to retain the artifact'
        required: false
        type: number
        default: 5

jobs:
  test-action:
    name: GitHub Actions Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      # Create directory with proper permissions
      - name: Create log directory with proper permissions
        run: |
          mkdir -p collector-logs
          chmod 777 collector-logs

      # Start OpenTelemetry Collector manually because GitHub Actions service container does not read custom config files before checkout
      - name: Start OpenTelemetry Collector
        # port 13133 is used for health checks, 4318 for OTLP HTTP endpoint
        run: |
          echo "Starting OpenTelemetry Collector with custom configuration..."
          docker run -d \
            --name otel-collector \
            -p 13133:13133 \
            -p 4318:4318 \
            -v ${{ github.workspace }}/.github/configs/otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml:ro \
            -v ${{ github.workspace }}/collector-logs:/collector-logs \
            --health-cmd "wget --no-verbose --tries=1 --spider http://localhost:13133/ || exit 1" \
            --health-interval 10s \
            --health-timeout 5s \
            --health-retries 3 \
            otel/opentelemetry-collector-contrib:0.115.1

      # Wait for collector to be healthy and ready
      - name: Wait for collector to be ready
        run: |
          echo "Waiting for OpenTelemetry Collector to be ready..."
          timeout 60s bash -c 'until docker ps | grep -q "healthy.*otel-collector"; do sleep 2; echo "Waiting for collector health check..."; done'
          echo "Collector is ready"

      # Execute the GitHub Action which sends telemetry data to the collector
      - name: Test Local Action
        id: test-action
        uses: ./
        env:
          OTEL_SERVICE_NAME: github-actions-opentelemetry
          # Point to local collector service (not external endpoint)
          OTEL_EXPORTER_OTLP_ENDPOINT: http://localhost:4318
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait for file system operations
        run: |
          echo "Waiting for file writes to complete..."
          sleep 5

      # Setup normalization filters
      - name: Setup normalization filters
        run: |
          # Create JQ filters for normalization
          cat > /tmp/normalize-traces.jq << 'EOF'
          del(.resourceSpans[]?.scopeSpans[]?.spans[]?.traceId) |
          del(.resourceSpans[]?.scopeSpans[]?.spans[]?.spanId) |
          del(.resourceSpans[]?.scopeSpans[]?.spans[]?.parentSpanId) |
          del(.resourceSpans[]?.scopeSpans[]?.spans[]?.startTimeUnixNano) |
          del(.resourceSpans[]?.scopeSpans[]?.spans[]?.endTimeUnixNano) |
          .resourceSpans[]?.scopeSpans[]?.spans[]?.attributes[]? |= (
            if .key == "run_id" then .value = {"intValue": "0"}
            elif .key == "job.id" then .value = {"intValue": "0"}
            elif .key == "url" then .value = {"stringValue": "https://example.com/actions/runs/0"}
            elif .key == "runner.name" then .value = {"stringValue": "GitHub Actions 0"}
            else .
            end
          )
          EOF

          cat > /tmp/normalize-metrics.jq << 'EOF'
          del(.resourceMetrics[]?.scopeMetrics[]?.metrics[]?.gauge?.dataPoints[]?.startTimeUnixNano) |
          del(.resourceMetrics[]?.scopeMetrics[]?.metrics[]?.gauge?.dataPoints[]?.timeUnixNano) |
          del(.resourceMetrics[]?.scopeMetrics[]?.metrics[]?.gauge?.dataPoints[]?.asDouble)
          EOF

      # Generate normalized files
      - name: Generate normalized files
        run: |
          # Create normalized files from collector output
          if [ -f "collector-logs/traces.json" ]; then
            jq -f /tmp/normalize-traces.jq collector-logs/traces.json > collector-logs/traces-actual.json
            echo "✓ Created actual traces file"
          fi

          if [ -f "collector-logs/metrics.json" ]; then
            jq -f /tmp/normalize-metrics.jq collector-logs/metrics.json > collector-logs/metrics-actual.json
            echo "✓ Created actual metrics file"
          fi

      # Upload collector logs as GitHub artifact for debugging
      - name: Upload collector logs as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
          path: collector-logs/
          retention-days: ${{ inputs.retention-days }}

      - name: Validate Traces
        run: |
          diff -u collector-logs/traces-actual.json ${{ github.workspace }}/.github/test-data/traces-expected.json
          if [ $? -eq 0 ]; then
            echo "✓ Trace structure matches expected format"
          else
            echo "✗ Trace structure differs from expected format"
            exit 1
          fi

      - name: Validate Metrics
        run: |
          diff -u collector-logs/metrics-actual.json ${{ github.workspace }}/.github/test-data/metrics-expected.json
          if [ $? -eq 0 ]; then
            echo "✓ Metrics structure matches expected format"
          else
            echo "✗ Metrics structure differs from expected format"
            exit 1
          fi

      # Show final collector status and logs for debugging
      - name: Show collector debug info
        if: always()
        run: |
          echo "=== Final collector status ==="
          docker ps -a | grep otel-collector || echo "Collector container not found"

          echo "=== Complete collector logs ==="
          docker logs otel-collector || echo "Could not retrieve collector logs"

          echo "=== All generated files ==="
          find collector-logs -type f -exec echo "File: {}" \; -exec head -10 {} \; -exec echo "---" \; 2>/dev/null || echo "No files found"
